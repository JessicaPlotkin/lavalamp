float scale(vec2 pos_rec, vec2 p) {
    float dist = distance(pos_rec, p);
    return (1.0/(dist*1.0));
}

float scale_by_temp(float depth) {
    return 1.0 / (log(depth + 2.0)) - 0.6;
}

float scale_by_temp_r(float depth) {
    // More physically correct.
    float volume = 1.0 / (log(depth + 2.0)) - 0.6;
    float radius = pow(volume, 1.0/3.0);
    return radius * 0.8;
}

float Circle(vec2 uv, vec2 pos, vec2 p, float r) {
    return r/ (distance(uv - pos, p) * 0.9);
}

float Ellipse(vec2 uv, vec2 p, float a, float b) {
    float shape = pow(p.x - uv.x, 2.0) / pow(b, 2.0) + pow(p.y - uv.y, 2.0) / pow(a, 2.0);
    return 1.0 / shape;
}

float Rectangle(vec2 uv, vec2 p, float left, float right, float bottom, float top, float blur) {
    uv -= p;
    float a = smoothstep(left - blur, left + blur, uv.x) * smoothstep(right+blur, right-blur, uv.x);
    float b = smoothstep(bottom - blur, bottom + blur, uv.y) * smoothstep(top+blur, top-blur, uv.y);
    return a * b;
}

float xMove(float mult, float range) {
    return sin(iTime * mult) * range;
}

float yMove(float mult, float range) {
     return cos(iTime * mult) * range;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates [0 <> 1].
    vec2 uv = fragCoord/iResolution.xy;

    // Center circle at origin.
    uv -= 0.5;

    // Scale by aspect ratio.
    uv.x *= iResolution.x/iResolution.y;
    
    // uv coords used for temperature
    vec2 temp_uv = fragCoord/iResolution.xy;
    float temp_at_depth = scale_by_temp(temp_uv.y);

    // Create the top and bottom silver frames.
    float recs = Rectangle(uv, vec2(0, 0.55), -1.0, 1.0, -0.1, 0.1, 0.01);
    recs += Rectangle(uv, vec2(0, -0.55), -1.0, 1.0, -0.1, 0.1, 0.01);

    float c = 0.0;
    if (recs == 0.0) {
        // Create the bottom wax pool. Also add a hidden wax pool at top for color purposes.
        c = Ellipse(uv, vec2(0.0, -0.5), 0.1, 1.0);

        // Wax blob movements.
        vec2 metaball_pos[10];
        
        // CHANGE SPEED HERE!
        // 1.0 for slow mode, anything else for normal mode.
        float slomo = 0.0;
        if (slomo == 1.0) {
            // Slow Mode
            metaball_pos[0] = vec2(-xMove(0.02, 0.3),  yMove(0.09, 0.5));
            metaball_pos[1] = vec2(xMove(0.01, 0.1), yMove(0.088, 0.5));
            metaball_pos[2] = vec2(xMove(0.035, 0.3), -yMove(0.068, 0.5));
            metaball_pos[3] = vec2(-xMove(0.04, 0.2), -yMove(0.04, 0.5));
            metaball_pos[4] = vec2(xMove(0.03, 0.3), yMove(0.057, 0.5));
            metaball_pos[5] = vec2(xMove(0.02, 0.1), yMove(0.085, 0.5));
            metaball_pos[6] = vec2(-xMove(0.03, 0.3), yMove(0.11, 0.5));
            metaball_pos[7] = vec2(xMove(0.05, 0.2), yMove(0.07, 0.5));
            metaball_pos[8] = vec2(-xMove(0.03, 0.3), yMove(0.11, 0.5));
            metaball_pos[9] = vec2(xMove(0.04, 0.1), yMove(0.1, 0.5));
        } else {
            // Normal Mode
            metaball_pos[0] = vec2(-xMove(0.01, 0.3),  yMove(0.25, 0.4));
            metaball_pos[1] = vec2(xMove(0.02, 0.1), yMove(0.2, 0.5));
            metaball_pos[2] = vec2(-xMove(0.025, 0.3), -yMove(0.1, 0.5));
            metaball_pos[3] = vec2(xMove(0.02, 0.2), -yMove(0.18, 0.5));
            metaball_pos[4] = vec2(xMove(0.03, 0.3), yMove(0.25, 0.4));
            metaball_pos[5] = vec2(-xMove(0.03, 0.1), yMove(0.15, 0.5));
            metaball_pos[6] = vec2(-xMove(0.01, 0.3), yMove(0.1, 0.5));
            metaball_pos[7] = vec2(xMove(0.02, 0.2), yMove(0.12, 0.5));
            metaball_pos[8] = vec2(-xMove(0.024, 0.3), yMove(0.22, 0.5));
            metaball_pos[9] = vec2(xMove(0.03, 0.1), yMove(0.3, 0.5));
        }

        // position of bottom of lavalamp container
        vec2 pos_bottom = vec2(0, -0.55);
        vec2 pos_blob = vec2(0, -0.35);

        vec2 scaled_dist[10];
        for (int i = 0; i < 10; i += 1){
            float temp = scale(pos_bottom, metaball_pos[i]);
            scaled_dist[i] = vec2(temp,temp);
        }
        
        float temp_gradient[10];
        // CHANGE TEMP EFFECTS HERE!
        // 1.0 for more physically correct temp effects, anything else for default.
        float realism = 0.0;
        if (realism == 1.0) {
            for (int i = 0; i < 10; i ++) {
                // scale the radius by temperature
                temp_gradient[i] = scale_by_temp_r(metaball_pos[i].y);
                // re-adjust the position by depth
                metaball_pos[i] = vec2(metaball_pos[i].x, metaball_pos[i].y + pow((0.15 / log((metaball_pos[i].y / iResolution.y) + 0.5)) - 0.2, 2.0));
            }
        } else {
            for (int i = 0; i < 10; i ++) {
                // scale the radius by temperature
                temp_gradient[i] = scale_by_temp(metaball_pos[i].y);
                // re-adjust the position by depth
                metaball_pos[i] = vec2(metaball_pos[i].x, metaball_pos[i].y + (0.15 / ((metaball_pos[i].y / iResolution.y) + 0.5)) - 0.2);
            }
        }

        // Blob 0
        c += Circle(uv, vec2(0.01), metaball_pos[0]*scaled_dist[0][0], 0.03 * temp_gradient[0]);
        c += Circle(uv, vec2(0.02, 0.0), metaball_pos[0]*scaled_dist[0][0], 0.02 * temp_gradient[0]);

        // Blob 1
        c += Circle(uv, vec2(-0.62, -0.2), metaball_pos[1]*scaled_dist[1][0], 0.018 * temp_gradient[1]);
        c += Circle(uv, vec2(-0.605, -0.18), metaball_pos[1]*scaled_dist[1][0], 0.03 * temp_gradient[1]);
        c += Circle(uv, vec2(-0.62, -0.17), metaball_pos[1]*scaled_dist[1][0], 0.02 * temp_gradient[1]);

        // Blob 2
        c += Circle(uv, vec2(-0.38, -0.18), metaball_pos[2]*scaled_dist[2][0], 0.03 * temp_gradient[2]);
        c += Circle(uv, vec2(-0.4, -0.22), metaball_pos[2]*scaled_dist[2][0], 0.015 * temp_gradient[2]);
        c += Circle(uv, vec2(-0.42, -0.2), metaball_pos[2]*scaled_dist[2][0], 0.025 * temp_gradient[2]);

        // Blob 3
        c += Circle(uv, vec2(0.4, -0.3), metaball_pos[3]*scaled_dist[3][0], 0.04 * temp_gradient[3]);
        c += Circle(uv, vec2(0.44, -0.26), metaball_pos[3]*scaled_dist[3][0], 0.03 * temp_gradient[3]);

        // Blob 4
        c += Circle(uv, vec2(-0.33, -0.1), metaball_pos[4]*scaled_dist[4][0], 0.025 * temp_gradient[4]);
        c += Circle(uv, vec2(-0.3, -0.12), metaball_pos[4]*scaled_dist[4][0], 0.03 * temp_gradient[4]);
        c += Circle(uv, vec2(-0.27, -0.1), metaball_pos[4]*scaled_dist[4][0], 0.035 * temp_gradient[4]);

        // Blob 5
        c += Circle(uv, vec2(0.55, -0.15), metaball_pos[5]*scaled_dist[5][0], 0.035 * temp_gradient[5]);

        // Blob 6
        c += Circle(uv, vec2(-0.05, -0.25), metaball_pos[6]*scaled_dist[6][0], 0.045 * temp_gradient[6]);

        // Blob 7
        c += Circle(uv, vec2(0.15, -0.37), metaball_pos[7]*scaled_dist[7][0], 0.03 * temp_gradient[7]);
        c += Circle(uv, vec2(0.15, -0.4), metaball_pos[7]*scaled_dist[7][0], 0.025 * temp_gradient[7]);
        c += Circle(uv, vec2(0.18, -0.42), metaball_pos[7]*scaled_dist[7][0], 0.03 * temp_gradient[7]);

        // Blob 8
        c += Circle(uv, vec2(-0.1, -0.18), metaball_pos[8]*scaled_dist[8][0], 0.035 * temp_gradient[8]);
        c += Circle(uv, vec2(-0.13, -0.2), metaball_pos[8]*scaled_dist[8][0], 0.035 * temp_gradient[8]);
        c += Circle(uv, vec2(-0.08, -0.2), metaball_pos[8]*scaled_dist[8][0], 0.025 * temp_gradient[8]);

        // Blob 9
        c += Circle(uv, vec2(0.37, -0.3), metaball_pos[9]*scaled_dist[9][0], 0.035 * temp_gradient[9]);
        c += Circle(uv, vec2(0.38, -0.28), metaball_pos[9]*scaled_dist[9][0], 0.015 * temp_gradient[9]);
        c += Circle(uv, vec2(0.4, -0.3), metaball_pos[9]*scaled_dist[9][0], 0.025 * temp_gradient[9]);
        c += Circle(uv, vec2(0.42, -0.33), metaball_pos[9]*scaled_dist[9][0], 0.015 * temp_gradient[9]);
    }

    // Background color.
    vec4 color = vec4(0.18, 0.01, 0.2, 1.0);
    // Add color of the wax ball if present.
    if (c >= 0.0) color += vec4(0, 0.4 * c / 0.75, 0.6, 1.0) * c;

    // adding fake normals + fake light source for diffuse shading effect.
    vec3 temp_color = color.xyz;
    // smooth normals between balls
 	vec3 normals = normalize(temp_color);

    vec3 col = vec3(0.0);

    vec3 light_position = vec3(-2.0, 0.5, .1);
    vec3 light_direction = normalize(light_position);

    float diffuse = sqrt(max(dot(light_direction, normals + 0.08), .0));

    // sqrt: smoothing lighting
    col = vec3(sqrt(diffuse));

    col *= vec3(.2, .7, .5);

    // CHANGE COLOR HERE!
    // Choose a value from 0 to 4. Remember to convert it to a float!
    // Any floats/invalid values will default to gray.
    float colorCombo = -1.0;
    
    if (colorCombo == 0.0) {
        // Orange
        col += vec3(0.9, 0.4, 0.2);
        
    } else if (colorCombo == 1.0) {
        // Blue
        col += vec3(0.2, 0.1, 0.7);
    
    } else if (colorCombo == 2.0) {
        // Bubblegum Pink
        col += vec3(0.7, 0.1, 0.4);
    
    } else if (colorCombo == 3.0) {
        // Green
        col += vec3(0.1, 0.5, 0.2);
    
    } else if (colorCombo == 4.0) {
        // Rainbow
        col += 0.5 * cos(iTime / 2.0 +uv.xyx+vec3(0.0,2.0,4.0));
    
    } else {
        //interesting effect of smoothing original blobs too:
        //col += vec3(0, 0.4 * c / 0.75, 0.6) * c;
        // Regular Gray
        col += vec3(0.18, 0.01, 0.2);
    }    

    color.xyz = col;


    // If position is within the frames, change color to silver.
    if (recs != 0.0) color = vec4(0.75, 0.75, 0.75, 1.0); //this smooths the normals between the balls
    // Output to screen
    fragColor = color;
}
